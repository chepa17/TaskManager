{"version":3,"sources":["Components/Input/Input.jsx","Components/Task/Task.jsx","App.js","serviceWorker.js","index.js"],"names":["Input","props","state","inputValue","isFocused","onChange","bind","onSubmit","onFocus","onBlur","event","this","setState","target","value","preventDefault","onAddTask","className","type","placeholder","onClick","Component","Task","onComplete","timeoutId","id","task","prevProps","isCompleted","clearTimeout","setTimeout","onRemove","date","Date","completedDate","name","checked","htmlFor","title","getMonth","getDate","getFullYear","getTasks","JSON","parse","localStorage","getItem","getID","Number","updateStorage","tasklist","setItem","stringify","App","tasks","taskId","inCompleteCount","inCompletedTasks","filter","map","length","prevState","index","findIndex","item","newTask","now","newTasks","splice","push","slice","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.34a45402.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Input.css'\n\nclass Input extends Component {\n  constructor({ props }) {\n    super(props);\n    this.state = {\n      inputValue: '',\n      isFocused: false\n    }\n\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onFocus = this.onFocus.bind(this);\n    this.onBlur = this.onBlur.bind(this);\n  }\n\n  onChange(event) {\n    this.setState({\n      inputValue: event.target.value,\n    });\n  }\n\n  onSubmit(event) {\n    event.preventDefault();\n    this.props.onAddTask(this.state.inputValue);\n    this.setState({\n      inputValue: '',\n    });\n  }\n\n  onFocus() {\n    this.setState({isFocused: true});\n  }\n\n  onBlur() {\n    this.setState({isFocused: false});\n  }\n\n  render() {\n    return (\n      <div className=\"app__input-wrapper input-wrapper\">\n        <form \n          className=\"input-wrapper__form\"\n          onSubmit={this.onSubmit}>\n          <input \n            type=\"text\"\n            placeholder=\"Add new task\"\n            className=\"input-wrapper__input\"\n            value={this.state.inputValue}\n            onChange={this.onChange}\n            onFocus={this.onFocus}\n            onBlur={this.onBlur}\n          />\n        </form>\n        {this.state.isFocused && <button \n          className={`input-wrapper__button button\n          ${this.state.isFocused && this.state.inputValue !== '' ? 'input-wrapper__active' : ''}\n          ${this.state.isFocused ? ' input-wrapper__focused' : ''}\n          `}\n          onClick={this.onSubmit}\n        >\n          Add\n        </button>}\n      </div>\n    )\n  } \n}\n\nexport default Input;","import React, { Component }  from 'react';\nimport PropTypes from 'prop-types';\nimport './Task.css'\n\nclass Task extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onComplete = this.onComplete.bind(this);\n    this.timeoutId = 0;\n    this.id = this.props.task.id;\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.task.isCompleted !== this.props.task.isCompleted) {\n      if (!this.props.task.isCompleted) {\n        clearTimeout(this.timeoutId);\n      }\n      \n      if (this.props.task.isCompleted) {\n        this.timeoutId = setTimeout(() => {\n          this.props.onRemove(this.id)\n        }, 60000);\n      }\n    }\n  }\n\n  onComplete() {\n    this.props.onComplete(this.id);\n  }\n\n  render() {\n    const { task } = this.props;\n    const date = new Date(task.completedDate);\n    const monthNames = [\n      \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n      \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n    ];\n    return (\n      <div className=\"tasklist__task task\">\n        <div className=\"task__body\">\n          <div \n            onClick={this.onComplete}\n            className={`roundedCheckbox${task.isCompleted ? ' checked' : ''}`}>\n            <input \n              type=\"checkbox\"\n              name=\"isComplited\"\n              className=\"task__checkbox roundedCheckbox\"\n              id={`roundedCheckbox${task.id}`}\n              checked={task.isCompleted}\n              onChange={this.onComplete}\n            />\n            <label htmlFor={`roundedCheckbox${task.id}`}></label>\n          </div>\n          <p className={`task__title${task.isCompleted ? ' task__completed' : ''}`}>{task.title}</p>\n        </div>\n        {\n          task.isCompleted && \n            (<p className=\"task__date\">\n              {`${monthNames[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()}`}\n            </p>)\n        }       \n      </div>\n    )\n  }\n\n}\n\nTask.propTypes = {\n  task: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    isCompleted: PropTypes.bool.isRequired,\n    completedDate: PropTypes.number,\n  }).isRequired,\n  onComplete: PropTypes.func.isRequired,\n  onRemove: PropTypes.func.isRequired,\n};\n\nexport default Task;","import React, { Component } from 'react';\nimport Input from './Components/Input/Input';\nimport Task from './Components/Task/Task';\nimport './App.css';\nfunction getTasks() {\n  return JSON.parse(localStorage.getItem('tasks')) || [];\n}\nfunction getID() {\n  return Number(localStorage.getItem('taskId')) || 1000;\n}\nfunction updateStorage(tasklist, id) {\n  localStorage.setItem('tasks', JSON.stringify(tasklist));\n  localStorage.setItem('taskId', id);\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: [],\n      taskId: 1000,\n    };\n\n    this.inCompleteCount = 0;\n    this.onAddTask = this.onAddTask.bind(this);\n    this.onComplete = this.onComplete.bind(this);\n    this.onRemove = this.onRemove.bind(this);\n  }\n\n  componentDidMount() {\n    const inCompletedTasks = getTasks().filter(task => !task.isCompleted);\n    const id = getID();\n    updateStorage(inCompletedTasks, id);\n    this.setState({\n      tasks: getTasks().map(task => ({...task, id: +task.id})),\n      taskId: getID(),\n    })\n    this.inCompleteCount = inCompletedTasks.length;\n  }\n\n  componentDidUpdate() {\n    updateStorage(this.state.tasks, this.state.taskId);\n  }\n\n  onComplete(id) {\n    this.setState(prevState => {\n      const index = prevState.tasks.findIndex(item => item.id === id);\n      const newTask = {...prevState.tasks[index]};\n      newTask.isCompleted = !prevState.tasks[index].isCompleted;\n      newTask.completedDate = newTask.isCompleted ? Date.now() : null;\n      const newTasks = [...prevState.tasks];\n      newTasks.splice(index, 1);\n      if (newTask.isCompleted) {\n        newTasks.push(newTask);\n        this.inCompleteCount--;\n      } else {\n        newTasks.splice(this.inCompleteCount, 0, newTask);\n        this.inCompleteCount++;\n      }\n      return {\n        tasks: newTasks,\n      }\n    });\n  }\n\n  onRemove(id) {\n    this.setState(prevState => {\n      const index = prevState.tasks.findIndex(item => item.id === id);\n      return {\n        tasks: [...prevState.tasks.slice(0, index), ...prevState.tasks.splice(index + 1)],\n      }\n    })\n  }\n\n  onAddTask(task) {\n    if (task !== '') {\n      this.setState(prevState => {\n        const newTasks = [...prevState.tasks];\n        newTasks.splice(this.inCompleteCount, 0 , {\n          title: task,\n          id: prevState.taskId,\n          isCompleted: false,\n          completedDate: null\n        });\n        return ({\n          tasks: newTasks,\n          taskId: prevState.taskId + 1,\n        })\n      });\n      this.inCompleteCount++; \n    }\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <h1 className=\"app__main-heading\">Task Manager</h1>\n        <h2 className=\"app__heading\">Work</h2>\n        <Input onAddTask={this.onAddTask}/>\n        <div>{this.state.tasks.map(task => \n          <Task \n            key={task.id} \n            task={task} \n            onComplete={this.onComplete} \n            onRemove={this.onRemove} \n          />\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}