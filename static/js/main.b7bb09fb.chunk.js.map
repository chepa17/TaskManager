{"version":3,"sources":["Components/Input/Input.jsx","Components/Task/Task.jsx","App.js","serviceWorker.js","index.js"],"names":["Input","state","inputValue","isFocused","inputRef","React","createRef","onChange","event","setState","target","value","onSubmit","preventDefault","props","onAddTask","current","focus","onFocus","onBlur","className","this","ref","type","placeholder","onClick","Component","Task","id","task","timeoutId","prevProps","completedAt","clearTimeout","setTimeout","onRemove","onComplete","name","checked","isCompleted","onToggle","htmlFor","title","format","uuid","require","App","tasks","prevState","index","findIndex","item","newTask","dayjs","newTasks","filter","JSON","parse","localStorage","getItem","_","stringify","tasklist","setItem","updateStorage","sortedTask","sort","a","b","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b7bb09fb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Input.css'\n\nclass Input extends Component {\n  state = {\n    inputValue: '',\n    isFocused: false\n  }\n\n  inputRef = React.createRef();\n\n  onChange = event => {\n    this.setState({\n      inputValue: event.target.value,\n    });\n  }\n\n  onSubmit = event => {\n    event.preventDefault();\n    this.props.onAddTask(this.state.inputValue);\n    this.setState({\n      inputValue: '',\n    });\n    this.inputRef.current.focus();\n  }\n\n  onFocus = () => {\n    this.setState({isFocused: true});\n  }\n\n  onBlur = () => {\n    this.setState({isFocused: false});\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"app__input-wrapper input-wrapper\">\n          <form \n            className=\"input-wrapper__form\"\n            onSubmit={this.onSubmit}>\n            <input \n              ref={this.inputRef}\n              type=\"text\"\n              placeholder=\"Add new task\"\n              className=\"input-wrapper__input\"\n              value={this.state.inputValue}\n              onChange={this.onChange}\n              onFocus={this.onFocus}\n              onBlur={this.onBlur}\n            />\n          </form>\n          {(this.state.isFocused || this.state.inputValue !== '') && <button \n            className={`input-wrapper__button button\n            ${this.state.isFocused && this.state.inputValue !== '' ? 'input-wrapper__active' : ''}\n            ${this.state.isFocused ? ' input-wrapper__focused' : ''}\n            `}\n            onClick={this.onSubmit}\n          >\n            Add\n          </button>}\n        </div>\n        <div className={`underline ${this.state.isFocused ? 'underline__focused' : 'underline__unfocused'}`}></div>\n      </>\n    )\n  } \n}\n\nexport default Input;","import React, { Component }  from 'react';\nimport PropTypes from 'prop-types';\nimport './Task.css'\n\nclass Task extends Component {\n  id = this.props.task.id;\n  timeoutId = 0;\n\n  componentDidUpdate(prevProps) {\n    if (!!prevProps.task.completedAt === !this.props.task.completedAt) {\n      if (!this.props.task.completedAt) {\n        clearTimeout(this.timeoutId);\n      }\n      \n      if (!!this.props.task.completedAt) {\n        this.timeoutId = setTimeout(() => {\n          this.props.onRemove(this.id)\n        }, 60000);\n      }\n    }\n  }\n\n  render() {\n    const { task } = this.props;\n\n    return (\n      <div className=\"tasklist__task task\">\n        <div className=\"task__body\">\n          <div \n            onClick={this.onComplete}\n            className={`roundedCheckbox${!!task.completedAt ? ' checked' : ''}`}>\n            <input \n              type=\"checkbox\"\n              name=\"isComplited\"\n              className=\"task__checkbox roundedCheckbox\"\n              id={`roundedCheckbox${task.id}`}\n              checked={task.isCompleted}\n              onChange={() => this.props.onToggle(this.id)}\n            />\n            <label htmlFor={`roundedCheckbox${task.id}`}></label>\n          </div>\n          <p className={`task__title${!!task.completedAt ? ' task__completed' : ''}`}>{task.title}</p>\n        </div>\n        {\n          !!task.completedAt && \n            (<p className=\"task__date\">\n              {task.completedAt.format('MMM D, YYYY')}\n            </p>)\n        }       \n      </div>\n    )\n  }\n\n}\n\nTask.propTypes = {\n  task: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  }).isRequired,\n  onToggle: PropTypes.func.isRequired,\n  onRemove: PropTypes.func.isRequired,\n};\n\nexport default Task;","import React, { Component } from 'react';\nimport Input from './Components/Input/Input';\nimport Task from './Components/Task/Task';\nimport './App.css';\nimport dayjs from 'dayjs'\nconst { uuid } = require('uuidv4');\n\nfunction getTasks() {\n  return JSON.parse(localStorage.getItem('tasks')) || [];\n}\n\nfunction updateStorage(tasklist = []) {\n  localStorage.setItem('tasks', JSON.stringify(tasklist.filter(task => !task.completedAt)));\n}\n\nclass App extends Component {  \n  state = {\n    tasks: [],\n  };\n\n  componentDidMount() {\n    this.setState({\n      tasks: getTasks(),\n    })\n  }\n\n  componentDidUpdate(_, prevState) {\n    if (JSON.stringify(prevState.tasks) !== JSON.stringify(this.state.tasks)) {\n      updateStorage(this.state.tasks);\n    }    \n  }\n\n  onToggle = id => {\n    this.setState(prevState => {\n      const index = prevState.tasks.findIndex(item => item.id === id);\n      const newTask = {...prevState.tasks[index]};\n      newTask.completedAt = !newTask.completedAt ? dayjs() : null;\n      const newTasks = [...prevState.tasks];\n      newTasks[index] = newTask;\n\n      return {\n        tasks: newTasks,\n      }\n    });\n  }\n\n  onRemove = id => {\n    this.setState(prevState => {\n      return ({\n        tasks: prevState.tasks.filter(item => item.id !== id),\n      })\n    })\n  }\n\n  onAddTask = task => {\n    if (task !== '') {\n      this.setState(prevState => ({\n          tasks: [\n          ...prevState.tasks, \n          {\n            title: task,\n            id: uuid(),\n            completedAt: null\n          }],\n        }));      \n  }}\n\n  render() {\n    const { tasks } = this.state; \n    const sortedTask = [...tasks].sort((a,b)=> a.completedAt - b.completedAt);\n\n    return (\n      <div className=\"app\">\n        <h1 className=\"app__main-heading\">Task Manager</h1>\n        <h2 className=\"app__heading\">Work</h2>\n        <Input onAddTask={this.onAddTask}/>\n        <div>\n          {sortedTask.map(task => (\n            <Task \n              key={task.id} \n              task={task} \n              onToggle={this.onToggle} \n              onRemove={this.onRemove} \n            />\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}